import random
import time
import threading

    # ----------- COMEÃ‡O DO BBB -----------

player = input("Quer jogar?? S ou N??\n").strip().lower()

if player != "s":
    print("Ok vaza entÃ£o\n")
    exit()

print("Let's bora:\n")
print("Primeiro irei te explicar as regras do jogo:\n ")
print("VocÃª precisa dar nome a 24 personagens. Quanto mais idiotas, melhor!\n")

    # ----------- NOMES PARA FACILITAR OS TESTES -----------
nomes = [
    "Bruno", "Camila", "JoÃ£o", "Larissa", "Mateus", "Juliana",
    "Pedro", "Vanessa", "Lucas", "Tatiane", "Rafael", "Bianca",
    "Henrique", "PatrÃ­cia", "Gustavo", "Fernanda", "Tiago", "Carol",
    "Daniel", "Isabela", "Marcos", "Aline", "Eduardo", "NatÃ¡lia"
]

    # ----------- COLETA DE NOMES -----------
#nomes = []
#for i in range(1, 25):
        #nome = input(f"{i}Âº personagem:\n")
       # nomes.append(nome)
    # ----------- COLETA DE NOMES -----------

print("\nTodos entram na casa do BBB...\n")



    # ----------- CÃ“DIGO PARA NÃƒO REPETIR OS NOMES -----------

for _ in range(5):  # ----------- EXIBE 5 MENSAGENS ALEATÃ“RIAS -----------
    selecionados = random.sample(nomes, 4)
    primeiro, segundo, terceiro, quarto = selecionados
    restante = [nome for nome in nomes if nome not in selecionados]
    sorteado = random.choice(restante) if restante else random.choice(nomes)

    # ----------- MENSAGENS -----------

    mensagens_base = [
        ("{0} jÃ¡ le tasca um beijÃ£o em {1}, a cÃ¢mera pega e todo o pÃºblico fica sabendo â€” plot twist que ninguÃ©m pediu.", 2),
        ("{0} falou que ama {1}, mas {1} era transgÃªnero e {0} cai em depressÃ£o profunda, porque assim Ã© o BBB: drama nonstop.", 2),
        ("{0} deu um 'corno, mas faz parte' pra {1} no meio da festa, e {1} jÃ¡ comeÃ§ou a chamar todo mundo de falso.", 2),
        ("{0} jurando que tÃ¡ apaixonado, mas a gente sabe que Ã© sÃ³ jogo e que {1} jÃ¡ tÃ¡ no prÃ³ximo rolÃª.", 2),
        ("{0} e {1} tretando por causa de um crush, enquanto {2} sÃ³ quer paz, amor e cerveja.", 3),
        ("{0} soltou a real: 'No BBB, amor Ã© combustÃ­vel, mas fofoca Ã© gasolina na fogueira'.", 1),
        ("{0} disse que vai sair da casa com a cabeÃ§a erguida, mas a cÃ¢mera jÃ¡ sabe que Ã© mentira e que a treta vai atÃ© o final.", 1),
        ("{0} mandou aquele shade digno, e {1} respondeu com um 'sÃ³ lamento, miga'.", 2),
        ("{0} tentou bancar o amigo, mas na real jÃ¡ tÃ¡ planejando a revanche no prÃ³ximo paredÃ£o.", 1),
        ("{0} chegou causando confusÃ£o e deixando a casa inteira com um 'quem vÃª, nÃ£o crÃª'.", 1),
        ("{0} e {1} sumiram do quarto por horas, quando voltaram, {2} jÃ¡ tava surtando com ciÃºmes.", 3),
        ("{0} pegou {1} no flagra com {2} embaixo do edredom. DisfarÃ§aram? Nem tentaram. A treta foi servida ao vivo.", 3),
        ("{0} tentou um clima com {1}, mas levou um 'vocÃª Ã© sÃ³ meu contatinho de paredÃ£o'. A vergonha foi nacional.", 2),
        ("{0} tentou fazer as pazes com {1}, mas levou um banho de bebida na cara no meio da festa.", 2),
        ("{0} foi falar mal de {1} no quarto, mas o microfone tava ligado direto na sala. Gafe histÃ³rica.", 2),
        ("{0} fez juras de amor para {1}, mas Ã  noite tava na piscina com {2} dizendo 'vocÃª que Ã© meu crush real'.", 3)
]

    # ----------- MENSAGENS -----------

    # ----------- FUNCIONAMENTO DA LISTA DE MENSAGENS -----------

    random.shuffle(mensagens_base)
mensagem_index = 0

def esperar_input(flag):
    input("[Aperte Enter para a prÃ³xima ou espere...]\n")
    flag.append(True)

for _ in range(5):
    if mensagem_index >= len(mensagens_base):
        print("Acabaram as fofocas por hoje. ðŸ‘€")
        break

    template, qtd_nomes = mensagens_base[mensagem_index]
    mensagem_index += 1

    # Pega somente a quantidade necessÃ¡ria de nomes, sem repetiÃ§Ã£o
    personagens = random.sample(nomes, qtd_nomes)

    # Formata a mensagem com os nomes certos
    mensagem = template.format(*personagens)

    print(mensagem)

    # Delay com possibilidade de pulo
    delay_flag = []
    thread = threading.Thread(target=esperar_input, args=(delay_flag,))
    thread.start()

    base_delay = 20
    extra_delay = max(0, len(mensagem) - 200) // 20
    total_delay = base_delay + extra_delay

    for _ in range(total_delay):
        if delay_flag:
            break
        time.sleep(1)

    print()

        # ----------- FUNCIONAMENTO DA LISTA DE MENSAGENS -----------

    





    
    